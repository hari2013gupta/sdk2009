# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Android-CI

# This workflow is triggered on pushes to the repository.

env:
#  # The name of the main module repository
#  main_project_module: app
#  # token
    token: ACCESS_TOKEN
#  # The name of the Play Store
#  playstore_name: Frogobox ID
#
#  # Keystore Path
#  ks_path: frogoboxdev.jks
#
#  # Keystore Password
#  ks_store_pass: cronoclez
#
#  # Keystore Alias
#  ks_alias: frogobox
#
#  # Keystore Alias Password
#  ks_alias_pass: xeonranger

on:
  push:
    branches: [ "main" ] # [dev,test]
  pull_request:
    branches: [ "main" ] # [dev,test]

  workflow_dispatch:

jobs:
  build:
    name: Android Build & Release
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      # Setup Java environment in order to build the Android app.
      - name: Setup Java Environment
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # [zulu, oracle] [12.x, 17, 21]
          java-version: '21'
          cache: 'gradle'
#          cache-dependency-path: | # optional
#            sub-project/*.gradle*
#            sub-project/**/gradle-wrapper.properties
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#      - name: Build with gradle
#        run: ./gradlew build --no-daemon

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1

#      - name: Setup Dart Environment
#        uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603
      - name: Setup Flutter Environment
        uses: subosito/flutter-action@v2
        id: flutter-action
        with:
          channel: stable # [dev, beta]
          flutter-version: 3.24.4 # [5b12b74, tag, commit, branch, main]
#          flutter-version-file: pubspec.yaml # path to pubspec.yaml [exact-ver]
          # optional parameters follow
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path

      - name: Print outputs - Command shell
        shell: bash
        run: |
          echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}
          echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}
          echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}
          echo VERSION=${{ steps.flutter-action.outputs.VERSION }}
          echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}
          echo PUB-CACHE-PATH=${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}
          echo PUB-CACHE-KEY=${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}


        #5 Setup Keystore
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > example/android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: Install dependencies
        run: |
          flutter --version
          flutter pub get

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test

      # Create Build [apk and aab]
      - name: Start Android Release Build
        run: |
          cd example
          flutter build apk --release
#          flutter build appbundle

        # Build IPA ( IOS Build )
#      - name: Build IPA
#        run: flutter build ipa --no-codesign

#      - name: Compress Archives and IPAs
#        run: |
#          cd build
#          tar -czf ios_build.tar.gz ios

      # Create Release
#      - name: Create Release
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: "example/build/app/outputs/flutter-apk/app-release.apk,example/build/app/outputs/bundle/release/app-release.aab,example/build/ios_build.tar.gz"
#          tag: v${{ env.VERSION }}
#          token: ${{ secrets.TOKEN }}

#       Upload generated apk to the artifacts
      - name: Upload Android Build to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-releases
          path: |            
            example/build/app/outputs/flutter-apk/app-release.apk
            example/build/app/outputs/bundle/release/app-release.aab
#            example/build/ios_build.tar.g
          if-no-files-found: error
