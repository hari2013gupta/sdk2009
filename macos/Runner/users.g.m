// Copyright@Sdk2009
// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "users.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface PGNUser ()
+ (PGNUser *)fromList:(NSArray<id> *)list;
+ (nullable PGNUser *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface PGNMessage ()
+ (PGNMessage *)fromList:(NSArray<id> *)list;
+ (nullable PGNMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation PGNUser
+ (instancetype)makeWithName:(NSString *)name
    mobileNo:(NSInteger )mobileNo {
  PGNUser* pigeonResult = [[PGNUser alloc] init];
  pigeonResult.name = name;
  pigeonResult.mobileNo = mobileNo;
  return pigeonResult;
}
+ (PGNUser *)fromList:(NSArray<id> *)list {
  PGNUser *pigeonResult = [[PGNUser alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  pigeonResult.mobileNo = [GetNullableObjectAtIndex(list, 1) integerValue];
  return pigeonResult;
}
+ (nullable PGNUser *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNUser fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.name ?: [NSNull null],
    @(self.mobileNo),
  ];
}
@end

@implementation PGNMessage
+ (instancetype)makeWithContent:(NSString *)content {
  PGNMessage* pigeonResult = [[PGNMessage alloc] init];
  pigeonResult.content = content;
  return pigeonResult;
}
+ (PGNMessage *)fromList:(NSArray<id> *)list {
  PGNMessage *pigeonResult = [[PGNMessage alloc] init];
  pigeonResult.content = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable PGNMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.content ?: [NSNull null],
  ];
}
@end

@interface PGNUsersPigeonCodecReader : FlutterStandardReader
@end
@implementation PGNUsersPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [PGNUser fromList:[self readValue]];
    case 130: 
      return [PGNMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNUsersPigeonCodecWriter : FlutterStandardWriter
@end
@implementation PGNUsersPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNUser class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNUsersPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNUsersPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNUsersPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNUsersPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNGetUsersCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNUsersPigeonCodecReaderWriter *readerWriter = [[PGNUsersPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpPGNUserHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNUserHostApi> *api) {
  SetUpPGNUserHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpPGNUserHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNUserHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigeon_package.UserHostApi.getHostLanguage", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetUsersCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getHostLanguageWithError:)], @"PGNUserHostApi api (%@) doesn't respond to @selector(getHostLanguageWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getHostLanguageWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigeon_package.UserHostApi.saveUser", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetUsersCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(saveUserUser:completion:)], @"PGNUserHostApi api (%@) doesn't respond to @selector(saveUserUser:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        PGNUser *arg_user = GetNullableObjectAtIndex(args, 0);
        [api saveUserUser:arg_user completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigeon_package.UserHostApi.getUser", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetUsersCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserWithCompletion:)], @"PGNUserHostApi api (%@) doesn't respond to @selector(getUserWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getUserWithCompletion:^(PGNUser *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigeon_package.UserHostApi.getAllUser", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetUsersCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllUserWithCompletion:)], @"PGNUserHostApi api (%@) doesn't respond to @selector(getAllUserWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getAllUserWithCompletion:^(NSArray<PGNUser *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpPGNMessageHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNMessageHostApi> *api) {
  SetUpPGNMessageHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpPGNMessageHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNMessageHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigeon_package.MessageHostApi.sendMessage", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetUsersCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageMessage:error:)], @"PGNMessageHostApi api (%@) doesn't respond to @selector(sendMessageMessage:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        PGNMessage *arg_message = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api sendMessageMessage:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
